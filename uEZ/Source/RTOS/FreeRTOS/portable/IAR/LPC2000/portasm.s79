        NAME LPC2000_FreeRTOS_portASM

            EXTERN InterruptHandlerX
	EXTERN vTaskSwitchContext
	EXTERN vTaskIncrementTick
	EXTERN vPortPreemptiveTick
	
	PUBLIC vPortPreemptiveTickEntry
	PUBLIC vPortYieldProcessor
	PUBLIC vPortStartFirstTask
            PUBLIC SWI_Handler
            PUBLIC Abort_Handler
            PUBLIC Prefetch_Handler
            PUBLIC Undefined_Handler
            EXTERN UEZBSP_FatalError_ARM

#include "FreeRTOSConfig.h"
#include "ISR_Support.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Starting the first task is just a matter of restoring the context that
; was created by pxPortInitialiseStack().
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        SECTION `.text`:CODE:NOROOT(2)
        ARM
vPortStartFirstTask:
	portRESTORE_CONTEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Manual context switch function.  This is the SWI hander.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        SECTION `.text`:CODE:NOROOT(2)
        ARM
SWI_Handler:
vPortYieldProcessor:
	ADD		LR, LR, #4			; Add 4 to the LR to make the LR appear exactly
								; as if the context was saved during and IRQ
								; handler.
								
	portSAVE_CONTEXT			; Save the context of the current task...
	LDR R0, =vTaskSwitchContext	; before selecting the next task to execute.
	mov     lr, pc
	BX R0
	portRESTORE_CONTEXT			; Restore the context of the selected task.

Abort_Handler:
        MOV R0, #5
        B UEZBSP_FatalError_ARM
Prefetch_Handler:
        MOV R0, #6
        B UEZBSP_FatalError_ARM
Undefined_Handler:
        MOV R0, #7
        B UEZBSP_FatalError_ARM
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Preemptive context switch function.  This will only ever get installed if
; portUSE_PREEMPTION is set to 1 in portmacro.h.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        SECTION `.text`:CODE:NOROOT(2)
        ARM
vPortPreemptiveTickEntry:
#if configUSE_PREEMPTION == 1
	portSAVE_CONTEXT			; Save the context of the current task...
	LDR R0, =vPortPreemptiveTick; before selecting the next task to execute.
	mov     lr, pc
	BX R0
	portRESTORE_CONTEXT			; Restore the context of the selected task.
#endif

AsmVector MACRO vectorNum
        portSAVE_CONTEXT
        mov R0, #vectorNum
        BL  InterruptHandlerX
        portRESTORE_CONTEXT
        ENDM
        
        EXTERN InterruptHandlerX
	EXTERN vTaskSwitchContext
	EXTERN vTaskIncrementTick
	EXTERN vPortPreemptiveTick

            PUBLIC AsmVector0
AsmVector0: AsmVector 0

            PUBLIC AsmVector1
AsmVector1: AsmVector 1

            PUBLIC AsmVector2
AsmVector2: AsmVector 2

            PUBLIC AsmVector3
AsmVector3: AsmVector 3

            PUBLIC AsmVector4
AsmVector4: AsmVector 4

            PUBLIC AsmVector5
AsmVector5: AsmVector 5

            PUBLIC AsmVector6
AsmVector6: AsmVector 6

            PUBLIC AsmVector7
AsmVector7: AsmVector 7

            PUBLIC AsmVector8
AsmVector8: AsmVector 8

            PUBLIC AsmVector9
AsmVector9: AsmVector 9

            PUBLIC AsmVector10
AsmVector10: AsmVector 10

            PUBLIC AsmVector11
AsmVector11: AsmVector 11

            PUBLIC AsmVector12
AsmVector12: AsmVector 12

            PUBLIC AsmVector13
AsmVector13: AsmVector 13

            PUBLIC AsmVector14
AsmVector14: AsmVector 14

            PUBLIC AsmVector15
AsmVector15: AsmVector 15

            END
